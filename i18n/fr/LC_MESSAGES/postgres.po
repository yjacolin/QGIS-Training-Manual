# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-15 14:48\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgres/adding_data.rst:2
# 0d492ebbe1704109befb691e7641d43e
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../postgres/adding_data.rst:4
# 6b761540512d4cad92302faf4843c93f
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../postgres/adding_data.rst:7
# ae0776d9526c470c91cf0c1034f3705c
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../postgres/adding_data.rst:11
# d8aef33d53f24d879004d5c8f42b4dc3
msgid "Insert statement"
msgstr ""

#: ../../postgres/adding_data.rst:13
# 66e051bb2e7d428eb854e110e7ddc38b
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../postgres/adding_data.rst:20
# 5224331784af40d3bf827bd9c6b8757a
msgid "A couple of things to note:"
msgstr ""

#: ../../postgres/adding_data.rst:22
# ab9bead2faad47ba8eba3f8d4e41ef10
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../postgres/adding_data.rst:24
# 5f4f52a5406f4fe89dcde83042001293
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../postgres/adding_data.rst:25
# c0faefb314a64e86903de397070bf3c6
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../postgres/adding_data.rst:26
# 3efa54095f0f443c855c67bbeb608c73
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../postgres/adding_data.rst:28
# 3de4ef9b595f4425980d3911c8363013
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../postgres/adding_data.rst:31
# 2293686ef3aa4d9f98358f2aa1368504
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../postgres/adding_data.rst:33
# 90360f740dc14ca583fad1fa744ca91a
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../postgres/adding_data.rst:40
# e1c644d4f9c744a1ba40bc0f64f5b71c
msgid "result:"
msgstr ""

#: ../../postgres/adding_data.rst:50
# d34e84b15042415d95610dcf18b62ba9
msgid "Now you try:"
msgstr ""

#: ../../postgres/adding_data.rst:52
# 9fef4274e5e6445db6c19a8832e2bd6c
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:54
# c7870837737945c89879516130d4b6a7
msgid "Write the sql you used here:"
msgstr ""

#: ../../postgres/adding_data.rst:70
# b8c33c7211dc4f33a5324f9ed9b1dd37
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../postgres/adding_data.rst:72
# 49c78b9ddced4644a5a6aea514c75ce4
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../postgres/adding_data.rst:81
# 3cea85bca9ce4b23bb92cdf56b491161
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../postgres/adding_data.rst:83
# c1a0ada5eb674e2b9395cdb233915c74
msgid "What problems did you encounter?"
msgstr ""

#: ../../postgres/adding_data.rst:104
# 676a748352a340cc9dc02930b3e75e4a
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:107
# 48f5811f4f20461dbd67dc5a00ca0057
msgid "What error did you get?"
msgstr ""

#: ../../postgres/adding_data.rst:110
# f9938bd4e7f34ea1aba5ee9b81b45f6d
msgid "You can't add the street using its name"
msgstr ""

#: ../../postgres/adding_data.rst:111
# c7ec03f531834aba8137c49847abdbda
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../postgres/adding_data.rst:114
# e02cc58e2ac54d5086a40910e16bf0f4
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../postgres/adding_data.rst:118
# 964924aeb667448580948eabcbc1e06e
msgid "Here is how we made our friend:"
msgstr ""

#: ../../postgres/adding_data.rst:126
# 0e858c6f0fed49aca6b14cd0a877945d
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../postgres/adding_data.rst:134
# 26ee9fc2985847839ec7edb1341d786c
msgid "Select data"
msgstr ""

#: ../../postgres/adding_data.rst:136
# eaa8c611bf9f4e5295bc99a31ec131cc
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../postgres/adding_data.rst:151
# ed5f82999c8841d59a0f55f5b1dfd662
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../postgres/adding_data.rst:154
# 3ba69888ce16496ab7164591be5425ef
msgid "Update data"
msgstr ""

#: ../../postgres/adding_data.rst:156
# e2a07d98f8f94945ba0324b44659c54e
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../postgres/adding_data.rst:163
# f04ab463536a4e2d8263381980e228fd
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../postgres/adding_data.rst:166
# 12c18455827048ff921f40138346dbc8
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../postgres/adding_data.rst:173
# 37c817097c7a46a2a6cfe6602a7bfa40
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../postgres/adding_data.rst:175
# d1c149754a544756981b1352da3ef1bc
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../postgres/adding_data.rst:179
# c3b2436ec9ab4f55a527abd0092a5b46
msgid "Delete Data"
msgstr ""

#: ../../postgres/adding_data.rst:181
# e2c8f284021546e8889a4c3ffaa6db27
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../postgres/adding_data.rst:188
# 90d71bae546f4283b3f9081d2c529718
msgid "Let's look at our people table now:"
msgstr ""

#: ../../postgres/adding_data.rst:197
# 8a84fadea8c54407886eea2584b237b8
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../postgres/adding_data.rst:210
#: ../../postgres/data_model.rst:483
#: ../../postgres/db_intro.rst:425
#: ../../postgres/queries.rst:314
#: ../../postgres/rules.rst:58
#: ../../postgres/views.rst:80
# e1a89619979248c0a3c32a72352bdcae
# 1948eb56cd3a47fa9494e36f949f46f3
# aa30a11b121d4a4c9d4613ed233989d0
# c0e61c3d67f547e3aeb5786de149c5b6
# b590bdf4f94545679badfb66c47f12e8
# fc93aed4f6964ae4911f735dbbbb0495
msgid "|IC|"
msgstr ""

#: ../../postgres/adding_data.rst:212
# feb949711cc34757bba4ccc1d420776c
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../postgres/adding_data.rst:217
#: ../../postgres/data_model.rst:489
#: ../../postgres/db_intro.rst:431
#: ../../postgres/queries.rst:320
#: ../../postgres/rules.rst:64
#: ../../postgres/views.rst:85
# ba352dd641c848cfa4b66bc2352913c8
# 1588f0726c2c4e87b848db64ccb10a39
# 152c5b8c8c944d61bbccc8796643746f
# 950b95a29e594fd197eb8afc76d89140
# 26a8f5bcd30745a9a51b42804934a91e
# bcfe650f116449a4bf656c67e81268f7
msgid "|WN|"
msgstr ""

#: ../../postgres/adding_data.rst:219
# 3fd6c165dc16447ebb763a3c82c7309a
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../postgres/data_model.rst:2
# a8d829a103604f16a808f8ab854360f2
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../postgres/data_model.rst:4
# 7a55c639eea04fa0996fbb3512f44ce5
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../postgres/data_model.rst:8
# 8ef4ab6f9b7e48b6b0a9f5f368575fc6
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../postgres/data_model.rst:12
# 67c60e0cf29648b283758e205dfe6cc2
msgid "Install PostgreSQL"
msgstr ""

#: ../../postgres/data_model.rst:14
#: ../../postgres/data_model.rst:51
# e352a3bfd3014e39a85bc42f9d854357
# f871f0972fc44ab38b518afcdaae1611
msgid "Under Ubuntu:"
msgstr ""

#: ../../postgres/data_model.rst:20
# 552c69bd8df14f8faf25aaa7391310d1
msgid "You should get a message like this:"
msgstr ""

#: ../../postgres/data_model.rst:39
# 176abb4304724f5192d04a4320fd51eb
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../postgres/data_model.rst:43
# ee2351433f3442cd88e89dda422828c1
msgid "Help"
msgstr ""

#: ../../postgres/data_model.rst:45
# 0986dd480a514bd8ab95b889a31a32b6
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../postgres/data_model.rst:49
# 33bf5db440a1455e84a919ea5ce43da8
msgid "Create a database user"
msgstr ""

#: ../../postgres/data_model.rst:53
# c204b63d1dac4f1d8339bc89da883673
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../postgres/data_model.rst:60
# bc031f1460ec4997a4873781a254683e
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../postgres/data_model.rst:62
# f3e33c1e070c448795c97583213be4b2
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../postgres/data_model.rst:71
# 768095c6929b421f900fac41810b1bc2
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../postgres/data_model.rst:74
# 98c0106d1ad942ae8f24d8344df7704e
msgid "What do those options mean?"
msgstr ""

#: ../../postgres/data_model.rst:86
# b8e2df4be05246108e6039076ddd52d2
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../postgres/data_model.rst:94
# a5bf1ac66b854d99b64d826c0d67c948
msgid "Verify the new account"
msgstr ""

#: ../../postgres/data_model.rst:100
# 38f7060fdd4a409ebd6da7d888076670
msgid "Should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:113
#: ../../postgres/data_model.rst:144
# 012bda6bce8c4fb494d7e853e297228a
# 008b42cde12041599d2ea4e754d1c1bb
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../postgres/data_model.rst:116
# 5f87903b1af84ad7a86514f52c38e91d
msgid "Create a database"
msgstr ""

#: ../../postgres/data_model.rst:118
# 57380ea336004767a406513b99b85e48
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../postgres/data_model.rst:125
# 8ef599ce177e481690e7e0685b2c5395
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../postgres/data_model.rst:131
# d939f7ddb2314e4b9e39579f77f520e9
msgid "Which should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:147
# 80cc98d50a6f416abc08c044e50717d0
msgid "Starting a database shell session"
msgstr ""

#: ../../postgres/data_model.rst:149
# eec11112011f42b2bf5afd35f12a1b67
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../postgres/data_model.rst:155
# e22a17cc75a340b3a5d974fefccb7e84
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:161
# 1c1f33ac358249e1a3da60b42bc13156
msgid "For help in using the shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:167
# becf512e5e524883a7f4f3001d972d75
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../postgres/data_model.rst:173
# a6f69e6268d74855914aa99e12fcd241
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../postgres/data_model.rst:179
# ce59bbf553424aeab521a0486d6cc76f
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../postgres/data_model.rst:184
# d2bc2c1964304b51aa33660c781e2f06
msgid "Make Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:186
# 0a3715e365cb4a4e96cdf788c3424a32
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../postgres/data_model.rst:193
# 05bd6374968843b4980d5f1223ac390b
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../postgres/data_model.rst:198
# 93373392867c4be6a7b2f1193aa4f408
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../postgres/data_model.rst:210
# e7a23aa2c4be4a73be07cdacde98f423
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../postgres/data_model.rst:213
# 917e1706f76a4f289936ad7d3096eadc
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../postgres/data_model.rst:217
# edb8b7beb51b4490ab9a98c912ab8daf
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:223
#: ../../postgres/data_model.rst:242
# 33c1e1905dd5473a95385e387eb40017
# 4aa4d0e7c4d24b839d65005419b5b092
msgid "Which should show something like this:"
msgstr ""

#: ../../postgres/data_model.rst:236
# 1405de2fcf3e40d1adef5829668ad9a8
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:250
# 587f36dff0494571b2b98c9767320f60
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../postgres/data_model.rst:252
# 63ca4b40afba409f9fe7275a04d574bd
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../postgres/data_model.rst:255
# 25da1ac3d2274875bce690abc9d0e6c5
msgid "Write the SQL you create here:"
msgstr ""

#: ../../postgres/data_model.rst:296
#: ../../postgres/queries.rst:289
# ada687fec2534045be5fcaeb1962c11e
# bd32231ffaa7471e853e705c94b27d36
msgid "Solution:"
msgstr ""

#: ../../postgres/data_model.rst:306
# 0410852880794553957f0a606253c3ad
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../postgres/data_model.rst:322
# 4f2c43dec3834c78b3491c0a841e78e3
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../postgres/data_model.rst:326
# 9bb4bc1026b74533b8da0da19187bd08
msgid "Create Keys in SQL"
msgstr ""

#: ../../postgres/data_model.rst:328
# 72557e493a3445cdbafaa5342d8478f3
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../postgres/data_model.rst:337
# 2c8e36be4d7341c891603242f76ee270
msgid "adding the key after the table has been created"
msgstr ""

#: ../../postgres/data_model.rst:338
# 84747dcb2dd74dfd81a68e5ec568e070
msgid "defining the key at time of table creation"
msgstr ""

#: ../../postgres/data_model.rst:340
# 014312192dd8499bb01aec6f230ccc05
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../postgres/data_model.rst:348
# de5c11e413814e629fecc7c33731a417
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../postgres/data_model.rst:351
# 3622dbf218614a0dbef38bd97f46e316
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../postgres/data_model.rst:361
# 69303398d2b647f785121fe50552f58f
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../postgres/data_model.rst:381
# 0e53ab1de9a747d48b3e43da1af293e5
msgid "Create Indexes in SQL"
msgstr ""

#: ../../postgres/data_model.rst:383
# 74243c89407d4cc79efea5179cf404ff
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../postgres/data_model.rst:409
# bac7dee7b68d443196fb6a4a75127769
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:411
# 64e8d4a863584d04b9d0c4a2b4d07247
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../postgres/data_model.rst:418
# a894a8afbaac4e30b9ec9fc9b8c21745
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../postgres/data_model.rst:420
# dc4a77c3f76043e79ec74304138b86a5
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../postgres/data_model.rst:436
# cd0737a809934983afec866dd937eaa0
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../postgres/data_model.rst:446
# ab8a060d08fc4ecc9242ea6d13288df7
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../postgres/data_model.rst:448
# 6c71e9378e3f4bc19dbcf812f429209b
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../postgres/data_model.rst:464
# c68b947816924955aba5225cc053c8be
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../postgres/data_model.rst:469
# 89afe0371a75430d92b8a37ac9945325
msgid "A word on PG Admin III"
msgstr ""

#: ../../postgres/data_model.rst:471
# 509e652111ee4c6bb6ed22fd5a23114c
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../postgres/data_model.rst:476
# eaca222ba19a4832939419e9add1aa0d
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../postgres/data_model.rst:485
# 1af2ef4324554819aa9c619eed665a13
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../postgres/data_model.rst:491
# 8aee15b6c20443fb9eeaed987c4a381b
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../postgres/db_intro.rst:2
# c9de32b42b0541c89c6cc3708d449c93
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../postgres/db_intro.rst:4
# 2d93a9f7efae4d6c8bbe16372a75c607
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../postgres/db_intro.rst:8
# fbd4e11de3b34f319458560d55b92f43
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../postgres/db_intro.rst:11
# 1952ade3450d4e35b52ba8692cac51bc
msgid "What is a Database?"
msgstr ""

#: ../../postgres/db_intro.rst:13
# aa7ff61ad41548ce9bf4f00c379b1a71
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:18
# afdad0de24264e4f9340c1da20cb2130
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:23
# 2866bee438e44242a4c1645ed0ea64ef
msgid "Tables"
msgstr ""

#: ../../postgres/db_intro.rst:25
# 68133f17b26846479d123d72a14193be
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:40
# e70d5b4a35e842c0bd2dc93e7b57beb5
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../postgres/db_intro.rst:43
# 06f2b1d4f56d4f14855917ba8bc8a9f0
msgid "Columns / Fields"
msgstr ""

#: ../../postgres/db_intro.rst:45
# a8181be30c9e4facaed5798760ab0fed
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:52
# 941c6770ed684ea8af6024e7440bda6a
msgid "A column:"
msgstr ""

#: ../../postgres/db_intro.rst:61
# cebe1671b65a45c59f15fc4bacc73f8f
msgid "A field:"
msgstr ""

#: ../../postgres/db_intro.rst:68
# 74b1cae6aafd4261a14f23fac98e6448
msgid "Records"
msgstr ""

#: ../../postgres/db_intro.rst:70
# 1157fbbd89634169ad45ac0f51730ca4
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../postgres/db_intro.rst:78
# e4084a8c454343fb866b66c9c0578521
msgid "Datatypes"
msgstr ""

#: ../../postgres/db_intro.rst:80
# 072e9c52b2c349d48b373b33c70180da
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../postgres/db_intro.rst:83
# f3c894ab5c424a39af1df7053c03f93e
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../postgres/db_intro.rst:85
# 3e20cec401c149ab96ea833721ecf06d
msgid "String - to store free-form text data"
msgstr ""

#: ../../postgres/db_intro.rst:86
# b23a185a08aa4178905802d137d05d2d
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../postgres/db_intro.rst:87
# 1fd0f29b3b2a43f181d22ce69e4f25f7
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../postgres/db_intro.rst:88
# 9b28c865ba77498ea777773a4a0698cd
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../postgres/db_intro.rst:89
# 92c18f35b1c24003b94dfeadef4b04fd
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../postgres/db_intro.rst:91
# 8da390368995477bab38d295a592b0e6
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../postgres/db_intro.rst:111
# 01b26f754d174cfb998c86b4a4ec9034
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../postgres/db_intro.rst:115
# ca71046ca37444dab8e65768f5e52c0d
msgid "Modelling an Address Database"
msgstr ""

#: ../../postgres/db_intro.rst:117
# 7044a68e18b849a5862d583d3f50e447
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../postgres/db_intro.rst:120
# 35a4ca165a85411ca7a5c8ec8dcf5c6c
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../postgres/db_intro.rst:155
# de60d1d86b4b4ea6b736a24236e6a137
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../postgres/db_intro.rst:160
# bb11680a956f4fd286f2bc072fe2c33e
msgid "Database Theory"
msgstr ""

#: ../../postgres/db_intro.rst:162
# a4fffe78ec4c4f2bbc91135baf93a8d4
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../postgres/db_intro.rst:166
# 78ccb34f95384eeaa369276d21596f89
msgid "Normalisation"
msgstr ""

#: ../../postgres/db_intro.rst:168
# ec983115cf64486f9cff35754827fd35
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../postgres/db_intro.rst:171
# fafa12dbe19943b283582f3755fd90e7
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:176
# 441a4dbe983a4bcb9097f0e4270ee376
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../postgres/db_intro.rst:178
# 339dacb0772c4dfa8fe1033b0a136f2b
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../postgres/db_intro.rst:203
# 60fe2705bd574b31890e11dcb4cf5e97
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../postgres/db_intro.rst:207
# 033c57f565bb444e99f79c606e45b39f
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../postgres/db_intro.rst:237
# 7e5df273d70b4326b33461d03370463a
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../postgres/db_intro.rst:241
# c14d62fc1d2b4261b0c6269d4f8ec6eb
msgid "Indexes"
msgstr ""

#: ../../postgres/db_intro.rst:243
# 99df2343501941cd804ddb8cbd7918d1
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:246
# 9e9751eefc4a406688792734f6c8ae92
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../postgres/db_intro.rst:256
# 1386a0ea516644e387b685f2d6685d37
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../postgres/db_intro.rst:274
# fb5884df4aab44c894b355f62cf58ad5
msgid "Sequences"
msgstr ""

#: ../../postgres/db_intro.rst:276
# 8572229f403d4015a59792c56578b71e
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../postgres/db_intro.rst:279
# 1b7ec0c5046c4216a57635489aab9011
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../postgres/db_intro.rst:290
# fba4100055d14daca65656a4e5f8cf95
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../postgres/db_intro.rst:292
# b77767ac4e97484391e607d4333d4f19
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../postgres/db_intro.rst:305
# bab650a885b64bb2a09ff6a23efe110c
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../postgres/db_intro.rst:316
# 4a8dab970bf4452fa8f6fcc70b4ff14b
msgid "and"
msgstr ""

#: ../../postgres/db_intro.rst:326
# 388e3e6c76cd407c9eb006c2850815b1
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../postgres/db_intro.rst:329
# 0b73cc9e5b784e05b1f90cb43361bad9
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../postgres/db_intro.rst:335
# 9d77a671552f4800ae81d27731c2538c
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../postgres/db_intro.rst:338
# f935419009854d488db12e49dac7b60e
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../postgres/db_intro.rst:370
# 876b00cc45644e38804c13491e8fdd8e
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../postgres/db_intro.rst:372
# 88015fdfeb2a4dc3b8c2e7a09f50d4ed
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../postgres/db_intro.rst:377
# dc9c6d02c538431a80f036d97c8e9c52
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../postgres/db_intro.rst:380
# fe84bf928a914a64a97836d1b140a869
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../postgres/db_intro.rst:383
# 97128b181ca84a50ab51df0ed8a4d17c
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../postgres/db_intro.rst:386
# 8f7891b3094543dd92c6dc475c03ca34
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../postgres/db_intro.rst:406
# 8c960cab5e5e46a692e716b516f7b117
msgid "Transactions"
msgstr ""

#: ../../postgres/db_intro.rst:408
# 989880e7abcc47f18dd454de7a97b77b
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../postgres/db_intro.rst:414
# 735979175f8f407aa9ed8d8d2d5e69d4
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../postgres/db_intro.rst:418
# 5ff89e3497414f5f988cad7d47a2c721
msgid "remove R20 from Joe"
msgstr ""

#: ../../postgres/db_intro.rst:419
# b6275c806c36439cbcb9890da2db3431
msgid "add R20 to Anne"
msgstr ""

#: ../../postgres/db_intro.rst:421
# 07c639ce108f461895bc93cec274ea4b
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../postgres/db_intro.rst:427
# 68487395ffcb4d26b382fdc3e2ef7cb8
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../postgres/db_intro.rst:433
# 46ff53ff4b8349b1a3b2cf2260cda1c8
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../postgres/index.rst:3
# 99b3989ebc1c4e4b8400bc039a7deabb
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../postgres/index.rst:5
# 431578d98c5f459d9fb2281983593edc
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../postgres/queries.rst:2
# 5c1112a522194a2b9a1465d56f4a31f2
msgid "|LS| Queries"
msgstr ""

#: ../../postgres/queries.rst:4
# 81031c67023c40debfb462e64b5b74b3
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../postgres/queries.rst:7
# 5febb15af3094616b8f8837aa1562d47
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../postgres/queries.rst:11
# 6985705b22f3470594e7b4d110b455be
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../postgres/queries.rst:13
# 5f590633202649b08e087f5538b03291
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../postgres/queries.rst:27
# 8cbe8d465c7145f081aef4684e2155cb
msgid "Ordering results"
msgstr ""

#: ../../postgres/queries.rst:29
# 74fde545d5f44535b18d8b3d30cca0dc
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../postgres/queries.rst:35
#: ../../postgres/queries.rst:53
#: ../../postgres/queries.rst:187
#: ../../postgres/queries.rst:212
#: ../../postgres/queries.rst:237
#: ../../postgres/queries.rst:254
#: ../../postgres/queries.rst:298
#: ../../postgres/views.rst:30
# 5d0811eb5f854715af24728562d6b788
# 4c02eda464e549788cda1c354ee8cc9b
# 9e2ae42fbfb446ab8c2f55efa8510e5b
# 176dea22b9374a5c8e9b47d2ea16723e
# d68ef3a25798443490b4061385cc0412
# 52eb17d23ae34a59ad5aba99c5e7f6a3
# bbf199e4c23c49c996605aeee0d0bb9f
# df9964ff26fa4a3f972bbdfaf3190f09
msgid "Result:"
msgstr ""

#: ../../postgres/queries.rst:47
# 0c0c83f9f56b49a483f48a892c2341e9
msgid "You can sort by more than one column:"
msgstr ""

#: ../../postgres/queries.rst:66
# a7e7541d168f463ca1569d32b871e745
msgid "Filtering"
msgstr ""

#: ../../postgres/queries.rst:68
# faca4d47573d4a9fb05dbd38dbf8062f
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../postgres/queries.rst:72
# 22cedee3844943d48cf964ca5a03391a
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../postgres/queries.rst:83
# df60a406035041a28295af9398662df8
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../postgres/queries.rst:96
# 02f9ea1d187444cba6f13dbf060a9b06
msgid "You can also filter based on text data:"
msgstr ""

#: ../../postgres/queries.rst:107
# bc784b06bf2b4925b64c9300a802de71
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../postgres/queries.rst:120
# 1cfbecd71e9749a5b7c56ba70779b052
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../postgres/queries.rst:132
# 1c2a15afa0634b8588a0a2a8df0c7dda
msgid "Joins"
msgstr ""

#: ../../postgres/queries.rst:134
# a78c13fe52aa4ec29aeb6fa769978e42
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../postgres/queries.rst:144
# 972cdc670653458891017639e6f91245
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../postgres/queries.rst:150
# 36f798a5db7d47dea270c5165a0461a8
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../postgres/queries.rst:162
# c773f728f40f4cc097f535792e2c580a
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../postgres/queries.rst:166
# 6ec1cf18ce924463a95d0c281188944d
msgid "Subselect"
msgstr ""

#: ../../postgres/queries.rst:168
# e7090baa19c448d7963964eb73abb35a
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../postgres/queries.rst:178
# 6ed9c074c3b94d8c866068f5e059bd78
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../postgres/queries.rst:199
# 91d4d3ecf44447df8c6073f8f543332f
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../postgres/queries.rst:222
# 9f3c160ff836481ba96e96659b82200d
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../postgres/queries.rst:227
# 3049a30c7eee49a88421d2faadd6bbfd
msgid "Aggregate Queries"
msgstr ""

#: ../../postgres/queries.rst:229
# 6ba796af951541938ab904acc1629e85
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../postgres/queries.rst:246
# 042cd8723b034095b6bd5c56d82530a0
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../postgres/queries.rst:265
# ba8a77958e16403588f00006a3f32fa4
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../postgres/queries.rst:268
# 9303cd6ecfc147fdb648ecfdca97504a
msgid "Exercise:"
msgstr ""

#: ../../postgres/queries.rst:270
# e0d2a611e81c4ec19db9a3239263ef6b
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../postgres/queries.rst:309
# 89ec0caae856473691efc314b53ae9f7
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../postgres/queries.rst:316
# fc9c8f044ea34dfa9bbbbc8cd8444036
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../postgres/queries.rst:322
# c472e08f272f4349a96c0a5828e2d3ce
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../postgres/rules.rst:2
# 614882e1b50d4d05a08a80284c2ca38f
msgid "|LS| Rules"
msgstr ""

#: ../../postgres/rules.rst:4
# 29a95c51d2aa4903a421775144c91236
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../postgres/rules.rst:7
# de666783c55a4f738f8bdf45a6ee1221
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../postgres/rules.rst:11
# 31ade031226c40f2830b8fea8f8ea0b3
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../postgres/rules.rst:13
# 5439a102b4724db3b3905cb268eb98a3
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../postgres/rules.rst:20
# 0840bc8f1cd34e76a237d0b6850b30f6
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../postgres/rules.rst:29
# 19568d29ed9848e0b648b82ade6c7d87
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../postgres/rules.rst:35
# d499acc953e744c785d6c4509a367c61
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../postgres/rules.rst:44
# 9b98dea86d5740c491734f594aa191f1
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../postgres/rules.rst:54
# bac9e16d0c874061b0af3ca7565e4b14
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../postgres/rules.rst:60
# 373ea877aad74da3be311f16cb3119ff
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../postgres/rules.rst:66
# e3ea61d6ace9459f85bae6d9fa24748c
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../postgres/views.rst:2
# 0e0fabfe452c4b16be983f9977b2030c
msgid "|LS| Views"
msgstr ""

#: ../../postgres/views.rst:4
# 5de488319a4d407390df5bbde42326b2
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../postgres/views.rst:8
# 1059f118516c497489f34747be3035d2
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../postgres/views.rst:11
# f71d209c0a1f4544bfe33b36620f3579
msgid "Creating a View"
msgstr ""

#: ../../postgres/views.rst:13
# d0724cdc03864a44bd454fcfaf4dec68
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../postgres/views.rst:23
# f260486d34ec445ba0a01f403a85115d
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../postgres/views.rst:42
# 2d5d4a352340446eb48a50c3847bdf2e
msgid "Modifying a View"
msgstr ""

#: ../../postgres/views.rst:44
# c130fa0c1f9a4ca78ce97172e5fa4308
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../postgres/views.rst:55
# 52449d484a8f471b877c4e08d11b9fcf
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../postgres/views.rst:58
# 17d310d582574b63bf5066b6d04d8bbf
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../postgres/views.rst:71
# d9677170637d4089ad85ccbb6c85ab1b
msgid "Dropping a View"
msgstr ""

#: ../../postgres/views.rst:73
# 26c026bb2a4448838170ea43574f60e1
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../postgres/views.rst:82
# 37b30de0611d42e994fcf742be0c9d50
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../postgres/views.rst:87
# 579ecff75806498cad7805bcb4038339
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

